<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>go-antman</title>
      <link href="/2020/01/13/go-antman/"/>
      <url>/2020/01/13/go-antman/</url>
      
        <content type="html"><![CDATA[<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> golang </tag>
            
            <tag> agent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go-build</title>
      <link href="/2020/01/09/go-build/"/>
      <url>/2020/01/09/go-build/</url>
      
        <content type="html"><![CDATA[<h1 id="go-build"><a href="#go-build" class="headerlink" title="go build"></a>go build</h1><p>By default, go build combines symbol and debug info with binary files. However, you can remove the symbol and debug info with go build -ldflags “-s -w”.</p><a id="more"></a><p>go build  默认参数是 debug 版，加编译参数-ldflags “-w -s”才是 release. -w 为去掉调试信息，-s 为去掉符号表,文件大小会减小。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go build -ldflags <span class="string">"-w -s"</span></span><br></pre></td></tr></table></figure><h1 id="golang-交叉编译"><a href="#golang-交叉编译" class="headerlink" title="golang 交叉编译"></a>golang 交叉编译</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GOOS=linux GOARCH=amd64 go build hello.go</span><br></pre></td></tr></table></figure><p>参数解析</p><p>GOOS：目标操作系统<br>GOARCH：目标操作系统的架构</p><table><thead><tr><th>OS</th><th>ARCH</th><th>OS version</th></tr></thead><tbody><tr><td>linux</td><td>386 / amd64 / arm</td><td>&gt;= Linux 2.6</td></tr><tr><td>darwin</td><td>386 / amd64</td><td>OS X (Snow Leopard + Lion)</td></tr><tr><td>freebsd</td><td>386 / amd64</td><td>&gt;= FreeBSD 7</td></tr><tr><td>windows</td><td>386 / amd64</td><td>&gt;= Windows 2000</td></tr></tbody></table><p><a href="https://golang.org/doc/install/source#environment" target="_blank" rel="noopener">参数官网地址</a></p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> build </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cobra</title>
      <link href="/2020/01/08/cobra/"/>
      <url>/2020/01/08/cobra/</url>
      
        <content type="html"><![CDATA[<h1 id="Cobra介绍"><a href="#Cobra介绍" class="headerlink" title="Cobra介绍"></a>Cobra介绍</h1><p>Cobra是一个库，其提供简单的接口来创建强大现代的CLI接口，类似于git或者go工具。同时，它也是一个应用，用来生成应用框架，从而开发以Cobra为基础的应用。Docker和Kubernetes源码中使用了Cobra。</p><p>概念<br>Cobra有三个基本概念commands,arguments和flags。其中commands代表行为，arguments代表数值，flags代表对行为的改变。</p><a id="more"></a><p>基本模型如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">APPNAME COMMAND ARG --FLAG</span><br></pre></td></tr></table></figure><h1 id="安装cobra"><a href="#安装cobra" class="headerlink" title="安装cobra"></a>安装cobra</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/spf13/cobra/cobra</span><br></pre></td></tr></table></figure><h1 id="安装cobra可执行命令"><a href="#安装cobra可执行命令" class="headerlink" title="安装cobra可执行命令"></a>安装cobra可执行命令</h1><p>在文件夹github.com/spf13/cobra/cobra下使用go install在$GOPATH/bin路径下生成cobra.exe可执行命令。</p><h1 id="使用Cobra"><a href="#使用Cobra" class="headerlink" title="使用Cobra"></a>使用Cobra</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cobra init demo</span><br></pre></td></tr></table></figure><h1 id="添加命令"><a href="#添加命令" class="headerlink" title="添加命令"></a>添加命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cobra add version</span><br></pre></td></tr></table></figure><h1 id="修改默认usage模板"><a href="#修改默认usage模板" class="headerlink" title="修改默认usage模板"></a>修改默认usage模板</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rootCmd.setUsageTemplate(s <span class="keyword">string</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> cobra </tag>
            
            <tag> cli </tag>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx-prometheus</title>
      <link href="/2020/01/08/nginx-prometheus/"/>
      <url>/2020/01/08/nginx-prometheus/</url>
      
        <content type="html"><![CDATA[<h1 id="监控Nginx服务器"><a href="#监控Nginx服务器" class="headerlink" title="监控Nginx服务器"></a>监控Nginx服务器</h1><p>由于官方没有提供Nginx直接可用的exporter，Nginx的监控要相对复杂一些。这里使用的是三方提供nginx-vts-exporter。</p><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><p>由于nginx-vts-exporter依赖于Nginx的nginx-module-vts模块，所以这里需要重新编译下Nginx。</p><a id="more"></a><ol><li>下载对应软件包<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /root</span><br><span class="line">$ wget <span class="string">'http://nginx.org/download/nginx-1.9.2.tar.gz'</span></span><br><span class="line">$ git <span class="built_in">clone</span> git://github.com/vozlt/nginx-module-vts.git</span><br></pre></td></tr></table></figure></li><li>编译安装Nginx<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install libreadline-dev libncurses5-dev libpcre3-dev libssl-dev perl make build-essential</span><br><span class="line">$ tar xzvf nginx-1.9.2.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> nginx-1.9.2</span><br><span class="line">$ ./configure --add-module=/root/nginx-module-vts</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li><li>修改Nginx配置 (/usr/local/nginx/conf/nginx.conf)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    vhost_traffic_status_zone;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        location &#x2F;status &#123;</span><br><span class="line">            vhost_traffic_status_display;</span><br><span class="line">            vhost_traffic_status_display_format html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>验证nginx-module-vts模块<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">访问 http:&#x2F;&#x2F;IP&#x2F;status</span><br></pre></td></tr></table></figure></li></ol><h2 id="exporter-metrics"><a href="#exporter-metrics" class="headerlink" title="exporter metrics"></a>exporter metrics</h2><h3 id="安装nginx-vts-exporter"><a href="#安装nginx-vts-exporter" class="headerlink" title="安装nginx-vts-exporter"></a>安装nginx-vts-exporter</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wget -O nginx-vts-exporter-0.5.zip https:&#x2F;&#x2F;github.com&#x2F;hnlq715&#x2F;nginx-vts-exporter&#x2F;archive&#x2F;v0.5.zip</span><br><span class="line">$ unzip nginx-vts-exporter-0.5.zip</span><br><span class="line">$ mv nginx-vts-exporter-0.5  &#x2F;usr&#x2F;local&#x2F;prometheus&#x2F;nginx-vts-exporter</span><br><span class="line">$ chmod +x &#x2F;usr&#x2F;local&#x2F;prometheus&#x2F;nginx-vts-exporter&#x2F;bin&#x2F;nginx-vts-exporter</span><br></pre></td></tr></table></figure><h3 id="创建Systemd服务"><a href="#创建Systemd服务" class="headerlink" title="创建Systemd服务"></a>创建Systemd服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;nginx_vts_exporter.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;nginx_exporter</span><br><span class="line">After&#x3D;network.target</span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;simple</span><br><span class="line">User&#x3D;prometheus</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;prometheus&#x2F;nginx-vts-exporter&#x2F;bin&#x2F;nginx-vts-exporter -nginx.scrape_uri&#x3D;http:&#x2F;&#x2F;localhost&#x2F;status&#x2F;format&#x2F;json</span><br><span class="line">Restart&#x3D;on-failure</span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><h3 id="启动nginx-vts-exporter"><a href="#启动nginx-vts-exporter" class="headerlink" title="启动nginx-vts-exporter"></a>启动nginx-vts-exporter</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl start nginx_vts_exporter.service</span><br></pre></td></tr></table></figure><h3 id="修改prometheus-yml，加入下面的监控目标："><a href="#修改prometheus-yml，加入下面的监控目标：" class="headerlink" title="修改prometheus.yml，加入下面的监控目标："></a>修改prometheus.yml，加入下面的监控目标：</h3><p>nginx-vts-exporter默认的抓取地址为<a href="http://IP:9913/metrics" target="_blank" rel="noopener">http://IP:9913/metrics</a></p>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> prometheus </tag>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go-jwt</title>
      <link href="/2020/01/07/go-jwt/"/>
      <url>/2020/01/07/go-jwt/</url>
      
        <content type="html"><![CDATA[<h2 id="jwt-生成"><a href="#jwt-生成" class="headerlink" title="jwt 生成"></a>jwt 生成</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GenerateJWT  jwt generate</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(service UserLoginService)</span> <span class="title">GenerateJWT</span><span class="params">(user model.User)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">expiresTime := time.Now().Unix() + <span class="keyword">int64</span>(config.OneDayOfHours)</span><br><span class="line">ID := fmt.Sprint(user.ID)</span><br><span class="line">claims := CustomClaims&#123;</span><br><span class="line">user.Username,</span><br><span class="line">jwt.StandardClaims&#123;</span><br><span class="line">Audience:  <span class="string">"Audience"</span>,        <span class="comment">// 受众</span></span><br><span class="line">ExpiresAt: expiresTime,       <span class="comment">// 失效时间</span></span><br><span class="line">Id:        ID,                <span class="comment">// 编号</span></span><br><span class="line">IssuedAt:  time.Now().Unix(), <span class="comment">// 签发时间</span></span><br><span class="line">Issuer:    <span class="string">"gin project"</span>,     <span class="comment">// 签发人</span></span><br><span class="line">NotBefore: time.Now().Unix(), <span class="comment">// 生效时间</span></span><br><span class="line">Subject:   <span class="string">"login"</span>,           <span class="comment">// 主题</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tokenClaims := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过密码和保留字段加密</span></span><br><span class="line"><span class="keyword">var</span> jwtSecret = []<span class="keyword">byte</span>(config.Secret + user.PasswordDigest)</span><br><span class="line">token, err := tokenClaims.SignedString(jwtSecret)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> token, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="中间件验证代码"><a href="#中间件验证代码" class="headerlink" title="中间件验证代码"></a>中间件验证代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> middleware</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"gin_project/config"</span></span><br><span class="line"><span class="string">"gin_project/model"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/dgrijalva/jwt-go"</span></span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// CustomClaims 自定义jwt</span></span><br><span class="line"><span class="keyword">type</span> CustomClaims <span class="keyword">struct</span> &#123;</span><br><span class="line">User <span class="keyword">string</span> <span class="string">`json:"user"`</span></span><br><span class="line">jwt.StandardClaims</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Auth 权限认证</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Auth</span><span class="params">()</span> <span class="title">gin</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">result := model.Result&#123;</span><br><span class="line">Code:    http.StatusUnauthorized,</span><br><span class="line">Message: <span class="string">"无法认证，重新登录"</span>,</span><br><span class="line">Data:    <span class="literal">nil</span>,</span><br><span class="line">&#125;</span><br><span class="line">auth := context.Request.Header.Get(<span class="string">"Authorization"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(auth) == <span class="number">0</span> &#123;</span><br><span class="line">context.Abort()</span><br><span class="line">context.JSON(http.StatusUnauthorized, result)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">auth = strings.Fields(auth)[<span class="number">1</span>]</span><br><span class="line"><span class="comment">// 校验token</span></span><br><span class="line">claims, err := parseToken(auth)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">result.Message = <span class="string">"token error "</span> + err.Error()</span><br><span class="line">context.AbortWithStatusJSON(http.StatusUnauthorized, result)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"token 正确"</span>)</span><br><span class="line">&#125;</span><br><span class="line">context.Set(<span class="string">"claims"</span>, claims)</span><br><span class="line"></span><br><span class="line">context.Next()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">parseToken</span><span class="params">(token <span class="keyword">string</span>)</span> <span class="params">(*CustomClaims, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 分割出来载体</span></span><br><span class="line">payload := strings.Split(token, <span class="string">"."</span>)</span><br><span class="line">bytes, e := jwt.DecodeSegment(payload[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">println</span>(e.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cm CustomClaims</span><br><span class="line"><span class="comment">//使用 json.Unmarshal(data []byte, v interface&#123;&#125;)进行转换,返回 error 信息</span></span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal(bytes, &amp;cm); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">i := cm.Id</span><br><span class="line">ID, err := strconv.Atoi(i)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">println</span>(err.Error())</span><br><span class="line">&#125;</span><br><span class="line">user := model.User&#123;&#125;</span><br><span class="line">user.ID = <span class="keyword">uint</span>(ID)</span><br><span class="line">u := model.User.QueryByID(user)</span><br><span class="line">jwtToken, err := jwt.ParseWithClaims(token, &amp;CustomClaims&#123;&#125;,</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(token *jwt.Token)</span> <span class="params">(i <span class="keyword">interface</span>&#123;&#125;, e error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">byte</span>(config.Secret + u.PasswordDigest), <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; jwtToken != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> claim, ok := jwtToken.Claims.(*CustomClaims); ok &amp;&amp; jwtToken.Valid &#123;</span><br><span class="line"><span class="keyword">return</span> claim, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang gin-cors</title>
      <link href="/2020/01/07/gin-cors/"/>
      <url>/2020/01/07/gin-cors/</url>
      
        <content type="html"><![CDATA[<h1 id="golang-gin框架-跨域访问配置代码"><a href="#golang-gin框架-跨域访问配置代码" class="headerlink" title="golang gin框架 跨域访问配置代码"></a>golang gin框架 跨域访问配置代码</h1><h2 id="中间件代码"><a href="#中间件代码" class="headerlink" title="中间件代码"></a>中间件代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> middleware</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-contrib/cors"</span></span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cors 跨域配置</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Cors</span><span class="params">()</span> <span class="title">gin</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line">config := cors.DefaultConfig()</span><br><span class="line">config.AllowMethods = []<span class="keyword">string</span>&#123;<span class="string">"GET"</span>, <span class="string">"POST"</span>, <span class="string">"PUT"</span>, <span class="string">"PATCH"</span>, <span class="string">"DELETE"</span>, <span class="string">"HEAD"</span>, <span class="string">"OPTIONS"</span>&#125;</span><br><span class="line">config.AllowHeaders = []<span class="keyword">string</span>&#123;<span class="string">"Origin"</span>, <span class="string">"Content-Length"</span>, <span class="string">"Content-Type"</span>, <span class="string">"Cookie"</span>&#125;</span><br><span class="line"><span class="keyword">if</span> gin.Mode() == gin.ReleaseMode &#123;</span><br><span class="line"><span class="comment">// 生产环境需要配置跨域域名，否则403</span></span><br><span class="line">config.AllowOrigins = []<span class="keyword">string</span>&#123;<span class="string">"http://www.example.com"</span>&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">config.AllowOrigins = []<span class="keyword">string</span>&#123;<span class="string">"*"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">config.AllowCredentials = <span class="literal">true</span></span><br><span class="line"><span class="keyword">return</span> cors.New(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router := gin.Default()</span><br><span class="line"><span class="comment">// cors 跨域设置</span></span><br><span class="line">router.Use(middleware.Cors())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rails cors</title>
      <link href="/2018/09/17/rails-cors/"/>
      <url>/2018/09/17/rails-cors/</url>
      
        <content type="html"><![CDATA[<h1 id="rails-cors-跨域访问设置"><a href="#rails-cors-跨域访问设置" class="headerlink" title="rails cors 跨域访问设置"></a>rails cors 跨域访问设置</h1><h2 id="gemfile"><a href="#gemfile" class="headerlink" title="gemfile"></a>gemfile</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem ‘rack-cors’, <span class="symbol">require:</span> ‘rack/cors’</span><br></pre></td></tr></table></figure><h2 id="config-application-rb"><a href="#config-application-rb" class="headerlink" title="config/application.rb"></a>config/application.rb</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">config.middleware.insert_before <span class="number">0</span>, Rack::Cors <span class="keyword">do</span></span><br><span class="line">  allow <span class="keyword">do</span></span><br><span class="line">    origins ‘‘</span><br><span class="line">    resource ‘‘, <span class="symbol">headers:</span> <span class="symbol">:any</span>, <span class="symbol">methods:</span> [<span class="symbol">:get</span>, <span class="symbol">:post</span>, <span class="symbol">:options</span>]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> rails </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rails </tag>
            
            <tag> cors </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 认识与入门</title>
      <link href="/2018/09/12/markdown/"/>
      <url>/2018/09/12/markdown/</url>
      
        <content type="html"><![CDATA[<p>Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。</p><a id="more"></a><h2 id="认识-Markdown"><a href="#认识-Markdown" class="headerlink" title="认识 Markdown"></a>认识 Markdown</h2><p>在刚才的导语里提到，Markdown 是一种用来写作的轻量级「标记语言」，它用简洁的语法代替排版，而不像一般我们用的字处理软件 Word 或 Pages 有大量的排版、字体设置。它使我们专心于码字，用「标记」语法，来代替常见的排版格式。例如此文从内容到格式，甚至插图，键盘就可以通通搞定了。目前来看，支持 Markdown 语法的编辑器有很多，包括很多网站（例如简书）也支持了 Markdown 的文字录入。Markdown 从写作到完成，导出格式随心所欲，你可以导出 HTML 格式的文件用来网站发布，也可以十分方便的导出 PDF 格式，这种格式写出的简历更能得到 HR 的好感。甚至可以利用 CloudApp 这种云服务工具直接上传至网页用来分享你的文章，全球最大的轻博客平台 Tumblr，也支持使用 Mou 这类 Markdown 工具进行编辑并直接上传。</p><h3 id="Markdown-官方文档"><a href="#Markdown-官方文档" class="headerlink" title="Markdown 官方文档"></a>Markdown 官方文档</h3><ul><li><p><a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="noopener">创始人 John Gruber 的 Markdown 语法说明</a></p></li><li><p><a href="http://wowubuntu.com/markdown/#list" target="_blank" rel="noopener">Markdown 中文版语法说明</a></p></li></ul><h2 id="使用-Markdown-的优点"><a href="#使用-Markdown-的优点" class="headerlink" title="使用 Markdown 的优点"></a>使用 Markdown 的优点</h2><ul><li>专注你的文字内容而不是排版样式。</li><li>轻松的导出 HTML、PDF 和本身的 .md 文件。</li><li>纯文本内容，兼容所有的文本编辑器与字处理软件。</li><li>可读，直观。适合所有人的写作语言。</li></ul><h2 id="Markdown-语法的简要规则"><a href="#Markdown-语法的简要规则" class="headerlink" title="Markdown 语法的简要规则"></a>Markdown 语法的简要规则</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>标题是每篇文章都需要也是最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只要在这段文字前加<code>#</code>号即可。</p><p><code># 一级标题</code></p><p><code>## 二级标题</code></p><p><code>### 三级标题</code></p><p>以此类推，总共六级标题，建议在井号后加一个空格，这是最标准的 Markdown 语法。</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>熟悉 HTML 的同学肯定知道有序列表与无序列表的区别，在 Markdown 下，列表的显示只需要在文字前加上<code>-</code> 或 <code>*</code> 即可变为无序列表，有序列表则直接在文字前加 <code>1.</code> <code>2.</code> <code>3.</code> 符号要和文字之间加上一个字符的空格。</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>如果你需要引用一小段别处的句子，那么就要用引用的格式。</p><p><code>&gt; 例如这样</code></p><p>只需要在文本前加入 <code>&gt;</code> 这种尖括号（大于号）即可</p><h3 id="图片与链接"><a href="#图片与链接" class="headerlink" title="图片与链接"></a>图片与链接</h3><p>插入链接与插入图片的语法很像，区别在一个 !号</p><p>链接 <code>[Baidu](https://www.baidu.com)</code><br>图片 <code>![img_name](img_url)</code></p><h3 id="粗体与斜体"><a href="#粗体与斜体" class="headerlink" title="粗体与斜体"></a>粗体与斜体</h3><p>Markdown 的粗体和斜体也非常简单，用两个 <code>*</code> 包含一段文本就是粗体的语法，用一个 <code>*</code> 包含一段文本就是斜体的语法。</p><p>例如：这里是<strong>粗体</strong> 这里是<em>斜体</em></p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>表格是Markdown 比较累人的地方，例子如下：</p><p>| Tables        | Are           | Cool  |</p><p>| ————- |:————-:| —–:|</p><p>| col 3 is      | right-aligned | $1600 |</p><p>| col 2 is      | centered      |   $12 |</p><p>| zebra stripes | are neat      |    $1 |</p><h3 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h3><p>如果你是个程序猿，需要在文章里优雅的引用代码框，在 Markdown 下实现也非常简单，只需要用两个 ``` 把中间的代码包裹起来，如 <code>code</code>。</p><p><code>def func  puts &quot;test&quot; end</code></p><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>分割线的语法只需要另起一行，连续输入三个星号 *** 即可。</p>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> md </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo</title>
      <link href="/2017/09/12/hello-world/"/>
      <url>/2017/09/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><h3 id="Create-a-page"><a href="#Create-a-page" class="headerlink" title="Create a page"></a>Create a page</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page <span class="string">"New page"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><p>执行命令之前安装</p><blockquote><p>yarn add hexo-deployer-git</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">or</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add hexo-generator-search</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
